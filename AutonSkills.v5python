{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n# Begin project code\nflDrive.set_velocity(79.5, PERCENT)\nmlDrive.set_velocity(79.5, PERCENT)\nblDrive.set_velocity(79.5, PERCENT)\nfrDrive.set_velocity(80, PERCENT)\nmrDrive.set_velocity(80, PERCENT)\nbrDrive.set_velocity(80, PERCENT)\n\nintake.set_velocity(80, PERCENT)\narm.set_velocity(80, PERCENT)\narm.set_stopping(HOLD)\n\ndef reverse():\n    flDrive.spin(REVERSE)\n    mlDrive.spin(REVERSE)\n    blDrive.spin(REVERSE)\n    frDrive.spin(REVERSE)\n    mrDrive.spin(REVERSE)\n    brDrive.spin(REVERSE)\n\ndef forward():\n    flDrive.spin(FORWARD)\n    mlDrive.spin(FORWARD)\n    blDrive.spin(FORWARD)\n    frDrive.spin(FORWARD)\n    mrDrive.spin(FORWARD)\n    brDrive.spin(FORWARD)\n\ndef turnLeft():\n    flDrive.spin(REVERSE)\n    mlDrive.spin(REVERSE)\n    blDrive.spin(REVERSE)\n    frDrive.spin(FORWARD)\n    mrDrive.spin(FORWARD)\n    brDrive.spin(FORWARD)\n\ndef turnRight():\n    flDrive.spin(FORWARD)\n    mlDrive.spin(FORWARD)\n    blDrive.spin(FORWARD)\n    frDrive.spin(REVERSE)\n    mrDrive.spin(REVERSE)\n    brDrive.spin(REVERSE)\n\ndef stopAll():\n    flDrive.stop()\n    mlDrive.stop()\n    blDrive.stop()\n    frDrive.stop()\n    mrDrive.stop()\n    brDrive.stop()\n\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n    clamp.set(True)\n    while frDrive.position(DEGREES) > -300:\n        reverse()\n        if arm.position(DEGREES) < 400:\n            arm.spin(FORWARD)\n        else:\n            arm.stop()\n    stopAll()\n    clamp.set(False)\n    wait(0.5, SECONDS)\n    intake.spin()\n\n    #turn right towards rings\n    goal = frDrive.position(DEGREES) -300\n    while frDrive.position(DEGREES) > goal:\n        turnRight()\n    stopAll()\n    wait(0.5, SECONDS)\n\ndef user_control():\n    brain.screen.clear_screen()\n    # place driver control in this while loop\n    while True:\n        wait(20, MSEC)\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n","textLanguage":"python","robotConfig":[],"slot":1,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}