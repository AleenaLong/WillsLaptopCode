{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nflDrive = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)\nmlDrive = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nblDrive = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)\nfrDrive = Motor(Ports.PORT9, GearSetting.RATIO_6_1, False)\nmrDrive = Motor(Ports.PORT7, GearSetting.RATIO_6_1, False)\nbrDrive = Motor(Ports.PORT8, GearSetting.RATIO_6_1, False)\nintake = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)\narm = Motor(Ports.PORT10, GearSetting.RATIO_6_1, True)\nclamp = DigitalOut(brain.three_wire_port.a)\ncontroller_1 = Controller(PRIMARY)\ndoink = DigitalOut(brain.three_wire_port.b)\ninert = Inertial(Ports.PORT4)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n# Begin project code\n# meow meow meow meow \n# Begin project code\n\ndef setVel(vel):\n    flDrive.set_velocity(vel, PERCENT)\n    mlDrive.set_velocity(vel, PERCENT)\n    blDrive.set_velocity(vel, PERCENT)\n    frDrive.set_velocity(vel, PERCENT)\n    mrDrive.set_velocity(vel, PERCENT)\n    brDrive.set_velocity(vel, PERCENT)\n    \nsetVel(60)\n\nintake.set_velocity(60, PERCENT)\narm.set_velocity(80, PERCENT)\narm.set_stopping(HOLD)\n\ndef reverse():\n    flDrive.spin(REVERSE)\n    mlDrive.spin(REVERSE)\n    blDrive.spin(REVERSE)\n    frDrive.spin(REVERSE)\n    mrDrive.spin(REVERSE)\n    brDrive.spin(REVERSE)\n\ndef forward():\n    flDrive.spin(FORWARD)\n    mlDrive.spin(FORWARD)\n    blDrive.spin(FORWARD)\n    frDrive.spin(FORWARD)\n    mrDrive.spin(FORWARD)\n    brDrive.spin(FORWARD)\n\ndef turnLeft():\n    flDrive.spin(REVERSE)\n    mlDrive.spin(REVERSE)\n    blDrive.spin(REVERSE)\n    frDrive.spin(FORWARD)\n    mrDrive.spin(FORWARD)\n    brDrive.spin(FORWARD)\n\n\ndef turnRight():\n    flDrive.spin(FORWARD)\n    mlDrive.spin(FORWARD)\n    blDrive.spin(FORWARD)\n    frDrive.spin(REVERSE)\n    mrDrive.spin(REVERSE)\n    brDrive.spin(REVERSE)\n\"\"\"\ndef turnLeft(userinput):\n    #negative left and positive right motor velocities, to reverse right and go fwd with left\n    frDrive.set_velocity(userinput,PERCENT)\n    flDrive.set_velocity(-userinput,PERCENT)\n    mrDrive.set_velocity(userinput,PERCENT)\n    mlDrive.set_velocity(-userinput,PERCENT)\n    brDrive.set_velocity(userinput,PERCENT)\n    blDrive.set_velocity(-userinput,PERCENT)\n    frDrive.spin(FORWARD)\n    flDrive.spin(FORWARD)\n    brDrive.spin(FORWARD)\n    blDrive.spin(FORWARD)\n    mrDrive.spin(FORWARD)\n    mlDrive.spin(FORWARD)\n\ndef turnRight(userinput):\n    #negative right and positive left motor velocities, to reverse right and go fwd with left\n    frDrive.set_velocity(-userinput,PERCENT)\n    flDrive.set_velocity(userinput,PERCENT)\n    mrDrive.set_velocity(-userinput,PERCENT)\n    mlDrive.set_velocity(userinput,PERCENT)\n    brDrive.set_velocity(-userinput,PERCENT)\n    blDrive.set_velocity(userinput,PERCENT)\n    frDrive.spin(FORWARD)\n    mlDrive.spin(FORWARD)\n    flDrive.spin(FORWARD)\n    brDrive.spin(FORWARD)\n    mrDrive.spin(FORWARD)\n    blDrive.spin(FORWARD)\n\"\"\"\ndef pidforward(setpoint, curposition):\n    #velocity\n    #go to motor.turns value inputted as \"setpoint\"\n    #if setpoint > curposition, drives forward. If not, reverses.\n    Kp = 39 #tuning notes: 38 for smooth stop, 40 for fast stop\n    error = setpoint - curposition\n    drivepower = error*Kp\n    if drivepower> 100 or drivepower < -100:\n        #makes sure drivepower not over 100% rpm\n        if drivepower > 0:\n            coeff = 1\n        else:\n            coeff = -1\n        drivepower = 100*coeff\n    if 0 <=drivepower < 9:\n        drivepower = 9\n    if -9 <drivepower <0:\n        drivepower = -9\n    if -0.05<error<0.05:\n        drivepower=0\n    return drivepower\n\ndef pidTurn(setpoint, curposition, start):\n    #PID for turning(to a point)\n    #if it turns over, will correct itself\n    #when setpoint > curposition, will turn right. otherwise, turn left.\n    integer = abs(setpoint - start)\n    Kp = 1/integer*9\n    Ki = 0\n    Kd = 0\n    global integralturn\n    global lasterrorturn\n    error = setpoint - curposition\n    #2.8 is the lowest possible voltage to still move in turn\n    turnpower = error*Kp#+integralturn*Ki+derivative*Kd\n    if -3 < turnpower < 3:\n        turnpower = 0\n    return turnpower\n\ndef stopAll():\n    flDrive.stop()\n    mlDrive.stop()\n    blDrive.stop()\n    frDrive.stop()\n    mrDrive.stop()\n    brDrive.stop()\n\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    print(\"pre auton code\")\n    wait(1, SECONDS)\n\ndef redStakeSide():\n    clamp.set(True)\n    while flDrive.position(DEGREES) > -600:\n        arm.spin(FORWARD)\n        reverse()\n    arm.stop()\n    stopAll()\n    wait(0.5, SECONDS)\n    clamp.set(False)\n    wait(1, SECONDS)\n    while True:\n        intake.spin(FORWARD)\n        wait(3, SECONDS)\n        break\n    # drive into ladder\n    flDrive.set_velocity(60, PERCENT)\n    mlDrive.set_velocity(60, PERCENT)\n    blDrive.set_velocity(60, PERCENT)\n    frDrive.set_velocity(80, PERCENT)\n    mrDrive.set_velocity(80, PERCENT)\n    brDrive.set_velocity(80, PERCENT)\n    goal = flDrive.position(DEGREES) - 600\n    while flDrive.position(DEGREES) > goal:\n        if arm.position(DEGREES) > 400:\n            arm.spin(REVERSE)\n        else:\n            arm.stop()\n        reverse()\n    stopAll()\n    wait(1, SECONDS)\n    arm.set_stopping(COAST)\n\ndef redRingSide():\n    print(\"redRingSide\")\n    clamp.set(True)\n    while flDrive.position(DEGREES) > -800:\n        print(arm.position(DEGREES))\n        if arm.position(DEGREES) < 1000:\n            print(\"arm spinning\")\n            arm.spin(FORWARD)\n        else:\n            arm.stop()\n        reverse()\n    stopAll()\n    wait(0.5, SECONDS)\n    clamp.set(False)\n    wait(0.5, SECONDS)\n    # turn RIGHT to face rings\n    goal = flDrive.position(DEGREES) + 225\n    while flDrive.position(DEGREES) < goal:\n        turnRight()\n    stopAll()\n    wait(0.5, SECONDS)\n    intake.spin(FORWARD)\n    # intake lone ring\n    goal = flDrive.position(DEGREES) + 370\n    while flDrive.position(DEGREES) < goal:\n        forward()\n    stopAll()\n    setVel(30)\n    goal = flDrive.position(DEGREES) + 20\n    while flDrive.position(DEGREES) < goal:\n        forward()\n    stopAll()\n    setVel(60)\n    wait(3, SECONDS)\n    intake.spin(REVERSE)\n    # go forward a little bit\n    goal = flDrive.position(DEGREES) + 100\n    while flDrive.position(DEGREES) < goal:\n        forward()\n    stopAll()\n    wait(0.5, SECONDS)\n    # turn RIGHT to face rings\n    goal = flDrive.position(DEGREES) + 200\n    while flDrive.position(DEGREES) < goal:\n        turnRight()\n    stopAll()\n    wait(0.5, SECONDS)\n    intake.spin(FORWARD)\n    # intake ring pair??\n    goal = flDrive.position(DEGREES) + 280\n    while flDrive.position(DEGREES) < goal:\n        forward()\n    stopAll()\n    wait(0.5, SECONDS)\n\ndef autonomous():\n    # place automonous code here\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # redStakeSide()\n    redRingSide()\n\ndef nonLinear(speed):\n    if speed == 0:\n        return 0\n    squared = speed**2\n    final = squared/128\n    if speed < 0:\n        return -final\n    if speed > 0:\n        return final\n\ndef user_control():\n    brain.screen.clear_screen()\n    # place driver control in this while loop\n    intake.set_velocity(80, PERCENT)\n    arm.set_velocity(80, PERCENT)\n    arm.set_stopping(HOLD)\n\n    clampState = True\n    #intakeState = False\n    doinkState = False\n\n    press = False\n    #intakePress = False\n    doinkPress = False\n    print(\"working\")\n\n    # position for arm to take in rings\n    armTake = 400\n    # position for arm to put ring on high stake\n    armScore = 600\n\n    while True:\n        fbSpeed = controller_1.axis3.position()\n        lrSpeed = controller_1.axis1.position()\n        if -5 < fbSpeed < 5:\n            fbSpeed = 0\n        if -5 < lrSpeed < 5:\n            lrSpeed = 0\n        # intake\n        if controller_1.buttonR1.pressing():\n            intake.spin(FORWARD)\n            print(\"spinning\")\n        elif controller_1.buttonR2.pressing():\n            intake.spin(REVERSE)\n        else:\n            intake.stop()\n        \"\"\"\n        # intake toggle\n        if controller_1.buttonL1.pressing():\n            if not intakePress:\n                intakePress = True\n                if intakeState:\n                    intakeState = False\n                elif not intakeState:\n                    intakeState = True\n        else:\n            intakePress = False\n        if intakeState:\n            intake.spin(FORWARD)\n        elif not intakeState:\n            intake.stop()\n        \"\"\"\n        # clamp\n        if controller_1.buttonL1.pressing():\n            if not press:\n                press = True\n                if clampState:\n                    clampState = False\n                elif not clampState:\n                    clampState = True\n                clamp.set(clampState)\n        else:\n            press = False\n        # arm\n        if controller_1.buttonA.pressing():\n            print(\"arming\")\n            arm.spin(FORWARD)\n        elif controller_1.buttonB.pressing():\n            arm.spin(REVERSE)\n        else:\n            arm.stop()\n        # doinker\n        if controller_1.buttonL2.pressing():\n            if not doinkPress:\n                doinkPress = True\n                if doinkState:\n                    doinkState = False\n                elif not doinkState:\n                    doinkState = True\n                doink.set(doinkState)\n        else:\n            doinkPress = False \n        \"\"\"\n        # arm toggle positions\n        if controller_1.buttonA.pressing():\n            goal = armTake\n        elif controller_1.buttonB.pressing():\n            goal = armScore\n        if arm.position(DEGREES) < goal - 5:\n            arm.spin(FORWARD)\n        elif arm.position(DEGREES) > goal + 5:\n            arm.spin(REVERSE)\n        else:\n            arm.stop()\n        \"\"\"\n        frDrive.set_velocity(nonLinear(fbSpeed - lrSpeed)*0.8, PERCENT)\n        mrDrive.set_velocity(nonLinear(fbSpeed - lrSpeed)*0.8, PERCENT)\n        brDrive.set_velocity(nonLinear(fbSpeed - lrSpeed)*0.8, PERCENT)\n        flDrive.set_velocity(nonLinear(fbSpeed + lrSpeed)*0.8, PERCENT)\n        mlDrive.set_velocity(nonLinear(fbSpeed + lrSpeed)*0.8, PERCENT)\n        blDrive.set_velocity(nonLinear(fbSpeed + lrSpeed)*0.8, PERCENT)\n        print(\"flDrive: \", flDrive.position(DEGREES))\n        print(\"mlDrive: \", mlDrive.position(DEGREES))\n        print(\"blDrive: \", blDrive.position(DEGREES))\n        print(\"frDrive: \", frDrive.position(DEGREES))\n        print(\"mrDrive: \", mrDrive.position(DEGREES))\n        print(\"brDrive: \", brDrive.position(DEGREES))\n        print(\"armPos:\", arm.position(DEGREES))\n        frDrive.spin(FORWARD)\n        mrDrive.spin(FORWARD)\n        brDrive.spin(FORWARD)\n        flDrive.spin(FORWARD)\n        mlDrive.spin(FORWARD)\n        blDrive.spin(FORWARD)\n        wait(20, MSEC)\n\n\nprint(\"what is going on?\")\n# create competition instance\nautonomous()\n# comp = Competition(user_control, autonomous)\npre_autonomous()","textLanguage":"python","robotConfig":[{"port":[1],"name":"flDrive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[2],"name":"mlDrive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[3],"name":"blDrive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[9],"name":"frDrive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[7],"name":"mrDrive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[8],"name":"brDrive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[5],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[10],"name":"arm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[1],"name":"clamp","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[2],"name":"doink","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[4],"name":"inert","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}